# --------------------------------------------------
# Description
# --------------------------------------------------
# Handle the internal operation of c file


# --------------------------------------------------
# Config
# do not change below setting
# these setting should be modified in makeconfig.json file
# --------------------------------------------------
CONFIG_IS_EXT_CONFIG_ENABLE	:= true
CONFIG_IS_STANDALONE		:= false
CONFIG_MACHINE				:= invalid

CONFIG_IMPORT_MACRO			:= false
CONFIG_IMPORT_INCLUDE		:= false
CONFIG_IMPORT_FLAG			:= false


# --------------------------------------------------
# Function
# --------------------------------------------------
rwildcard	=	$(wildcard $1/$2) $(foreach d,$(wildcard $1/*),$(call rwildcard,$(d),$2))

# function: get_config(config_name, file, ...) -> string
define get_config
	$(eval $(1) $(3)= $(shell $(SHELL_PREFIX) $(PY) $(CONFIG_PARSER_PATH) $(2) $(1) $($(1)) $(SHELL_SUFFIX)))
endef

# function: get_config_return(return_to, config_name, file, ...)
define get_config_return
	$(eval $(1) $(4)= $(shell $(SHELL_PREFIX) $(PY) $(CONFIG_PARSER_PATH) $(3) $(2) $($(1)) $(SHELL_SUFFIX)))
endef

# function: get_channel_output(return_to, direction, name, is_path, ...)
# the config name should be CONFIG_IMPORT_$(return_to)
define get_channel_output
    $(eval $(1) $(5)= $(shell $(SHELL_PREFIX) $(MAKE) --f=Makefile_Channel INPUT_CHANNEL_DIRECTION=$(2) INPUT_CHANNEL_NAME=$(3) INPUT_IS_PATH=$(4) $(SHELL_SUFFIX)))
endef

# function module
ifeq ($(OS),Windows_NT)
FOR_START		= for %%i in 
FOR_DO			= do
FOR_END			= 
FOR_ITEM		= %%i

else
FOR_START		= for i in 
FOR_DO			= ; do 
FOR_END			= ; done
FOR_ITEM		= $$d

endif


# --------------------------------------------------
# Data
# --------------------------------------------------
MODULE				= CPP
WORK_DIR			= ..

CONFIG_PARSER_PATH 	= Make_Parse.py
CONFIG_JSON_GLOBAL	= makeconfig.json
CONFIG_JSON_LOCAL	= makeconfig_$(MODULE).json

MAKE				= make
PY					= py
CPP					= g++

SRC_PATH 			= src
OBJ_PATH			= obj

OBJ_FILE			=

MACRO				=
INCLUDE				=
FLAG				= -c


# --------------------------------------------------
# Initiation
# --------------------------------------------------
# config based on host platform
ifeq ($(OS),Windows_NT)
PY					= py
SHELL_PREFIX		= 
SHELL_SUFFIX		= 
SPACE_PREFIX		= 
SPACE_SUFFIX		=
PATH_SEPARATOR		= /

else
PY					= python3
SHELL_PREFIX		= sh -c "
SHELL_SUFFIX		= "
SPACE_PREFIX		= "
SPACE_SUFFIX		= "
PATH_SEPARATOR		= \

endif

# read the config from makeconfig
# TODO: find a better way to do this thing, now is too slow
ifeq ($(CONFIG_IS_EXT_CONFIG_ENABLE),false)
else

$(call get_config, CONFIG_MACHINE,			$(CONFIG_JSON_GLOBAL),	 )
$(call get_config, WORK_DIR,				$(CONFIG_JSON_GLOBAL),	 )

$(call get_config, CONFIG_IS_STANDALONE,	$(CONFIG_JSON_LOCAL),	 )
$(call get_config, CONFIG_IMPORT_MACRO,		$(CONFIG_JSON_LOCAL),    )
$(call get_config, CONFIG_IMPORT_INCLUDE,	$(CONFIG_JSON_LOCAL),	 )
$(call get_config, CONFIG_IMPORT_FLAG,		$(CONFIG_JSON_LOCAL),	 )

$(call get_config, SRC_PATH,				$(CONFIG_JSON_LOCAL),	 )
$(call get_config, OBJ_PATH,				$(CONFIG_JSON_LOCAL),	 )

$(call get_config, OBJ_FILE,				$(CONFIG_JSON_LOCAL),	 )

$(call get_config, MACRO,					$(CONFIG_JSON_LOCAL),	+)
$(call get_config, INCLUDE,					$(CONFIG_JSON_LOCAL),	+)
$(call get_config, FLAG,					$(CONFIG_JSON_LOCAL),	+)

endif  # CONFIG_IS_EXT_CONFIG_ENABLE


# config machine
# x386
ifeq ($(CONFIG_MACHINE),x386)
OBJ_PATH 	:= $(OBJ_PATH)_x386
FLAG 		+= $(FLAG) -m32

# x64
else ifeq ($(CONFIG_MACHINE),x64)
OBJ_PATH 	:= $(OBJ_PATH)_x64
FLAG 		+= 

# arm
else ifeq ($(CONFIG_MACHINE),arm)
CC			:= arm-none-eabi-gcc
OBJ_PATH	:= $(OBJ_PATH)_arm
FLAG		+= -Wall -fdata-sections -ffunction-sections
FLAG		+= -mthumb
FLAG		+= -MMD -MP -MF"$(@:%.o=%.d)"

endif  # CONFIG_MACHINE


# --------------------------------------------------
# Preprocessing
# --------------------------------------------------
OBJ_FILE 		:= $(foreach p,$(OBJ_FILE),$(OBJ_PATH)/$(p))
INCLUDE			:= $(foreach p,$(INCLUDE),$(WORK_DIR)/$(p))


ifeq ($(CONFIG_IMPORT_MACRO),true)
    $(call get_channel_output, MACRO	,0	,CPP_MACRO		,false,	+)
endif

ifeq ($(CONFIG_IMPORT_INCLUDE),true)
    $(call get_channel_output, INCLUDE	,0	,CPP_INCLUDE	,false,	+)
endif

ifeq ($(CONFIG_IMPORT_FLAG),true)
    $(call get_channel_output, FLAG		,0	,CPP_FLAG		,false,	+)
endif


OBJ_FILE		:= $(foreach p,$(OBJ_FILE),$(WORK_DIR)/$(p))
MACRO			:= $(foreach p,$(MACRO),-D$(p))
INCLUDE			:= $(foreach p,$(INCLUDE),-I$(p))


# --------------------------------------------------
# Operation
# --------------------------------------------------
$(WORK_DIR)/$(OBJ_PATH)/%.o: $(WORK_DIR)/$(SRC_PATH)/%.cpp
#	@echo CPP $(SPACE_PREFIX)		$(SPACE_SUFFIX) $(<)
	@echo CPP $(SPACE_PREFIX)       $(SPACE_SUFFIX) $(<)
	@$(CPP) $(FLAG) $(MACRO) $(INCLUDE) $(<) -o $(@)


.PHONY: all
all: header self


.PHONY: header
header:
#	@echo MODULE $(SPACE_PREFIX)	$(SPACE_SUFFIX) $(MODULE)
	@echo MODULE $(SPACE_PREFIX)    $(SPACE_SUFFIX) $(MODULE)


.PHONY: self
self: $(OBJ_FILE)


.PHONY: clean
clean:
#	@echo MODULE $(SPACE_PREFIX)	$(SPACE_SUFFIX) $(MODULE)
	@echo MODULE $(SPACE_PREFIX)    $(SPACE_SUFFIX) $(MODULE)

ifeq ($(OS),Windows_NT)
#	TODO: fix this later
	@del $(WORK_DIR)\$(OBJ_PATH)\*

else
	@rm $(WORK_DIR)/$(OBJ_PATH)/*

endif


# --------------------------------------------------
# Helper
# --------------------------------------------------
.PHONY: var_list
var_list:
# config setting
	@echo CONFIG_IS_EXT_CONFIG_ENABLE $(SPACE_PREFIX)  $(SPACE_SUFFIX) $(CONFIG_IS_EXT_CONFIG_ENABLE)
	@echo CONFIG_IS_STANDALONE $(SPACE_PREFIX)         $(SPACE_SUFFIX) $(CONFIG_IS_STANDALONE)
	@echo CONFIG_MACHINE $(SPACE_PREFIX)               $(SPACE_SUFFIX) $(CONFIG_MACHINE)

# working directory
	@echo WORK_DIR $(SPACE_PREFIX)                     $(SPACE_SUFFIX) $(WORK_DIR)

# channel
	@echo CONFIG_IMPORT_MACRO $(SPACE_PREFIX)          $(SPACE_SUFFIX) $(CONFIG_IMPORT_MACRO)
	@echo CONFIG_IMPORT_INCLUDE $(SPACE_PREFIX)        $(SPACE_SUFFIX) $(CONFIG_IMPORT_INCLUDE)
	@echo CONFIG_IMPORT_FLAG $(SPACE_PREFIX)           $(SPACE_SUFFIX) $(CONFIG_IMPORT_FLAG)

# executable
	@echo PY $(SPACE_PREFIX)                           $(SPACE_SUFFIX) $(PY)
	@echo CPP $(SPACE_PREFIX)                          $(SPACE_SUFFIX) $(CPP)

# config file
	@echo CONFIG_PARSER_PATH $(SPACE_PREFIX)           $(SPACE_SUFFIX) $(CONFIG_PARSER_PATH)
	@echo CONFIG_JSON_GLOBAL $(SPACE_PREFIX)           $(SPACE_SUFFIX) $(CONFIG_JSON_GLOBAL)
	@echo CONFIG_JSON_LOCAL $(SPACE_PREFIX)            $(SPACE_SUFFIX) $(CONFIG_JSON_LOCAL)

# path
	@echo SRC_PATH $(SPACE_PREFIX)                     $(SPACE_SUFFIX) $(SRC_PATH)
	@echo OBJ_PATH $(SPACE_PREFIX)                     $(SPACE_SUFFIX) $(OBJ_PATH)

# file
	@echo OBJ_FILE $(SPACE_PREFIX)                     $(SPACE_SUFFIX) $(OBJ_FILE)

# macro, include, flag
	@echo MACRO $(SPACE_PREFIX)                        $(SPACE_SUFFIX) $(MACRO)
	@echo INCLUDE $(SPACE_PREFIX)                      $(SPACE_SUFFIX) $(INCLUDE)
	@echo FLAG $(SPACE_PREFIX)                         $(SPACE_SUFFIX) $(FLAG)


# --------------------------------------------------
# User Operation
# --------------------------------------------------
